---
title: "Processing All"
author: "Ilyes Baali"
date: "3/18/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Renaming file

```{bash}
for file in ./SRR67*; do 
  sra=$(basename $file | cut -d '.' -f 1 | | cut -d '_' -f 1)
  title=$(egrep $sra metadata.txt | cut -d " " -f 3)
  newName=$(echo "${file//$sra/${sra}_${title}}")
  mv $file ./$newName 
done
```


```{r, hide=TRUE}
library(ggplot2) 
library(magrittr)
library(tidyr)

genes_summary <-  read.table("./geneCounts.txt.summary", header=TRUE)

orig_names <- names(genes_summary)
new_names <- unlist(lapply(strsplit(orig_names[2:30], "[.]"), function(x) x[5]))
new_names <- unlist(lapply(strsplit(new_names, "_"), function(x) paste(x[2:(length(x)-3)], collapse="_")))

names(genes_summary) <- c(orig_names[1], new_names)




summary <- genes_summary

# transform the data frame to the proper format
summary <- gather(data = summary,
  key = samples,
  value = `#read`,
  colnames(summary)[2:30]
)

summary <- summary[summary$`#read` > 0,]
```

```{r plot, fig.width=10, fig.height=7}
p <- ggplot(summary, aes( x = `#read`, y = samples,  fill=Status))+ geom_bar(stat="identity", position=position_dodge()) + theme(legend.position = 'bottom') + labs(title = "Plots based on featureCount summary file", subtitle="featureCounts")

#p <- p + facet_grid(feature ~ . ) 

p

```



```{r}
folder <- "./" # download count table! ## reading in featureCounts output
readcounts <- paste0(folder,"geneCounts.txt") %>% read.table(., header=TRUE) 
str(readcounts)
```

```{r}
new_names <- unlist(lapply(strsplit(orig_names[2:30], "[.]"), function(x) x[5]))
new_names <- unlist(lapply(strsplit(new_names, "_"), function(x) paste(x[2:(length(x)-3)], collapse="_")))
### alternatives:
names(readcounts) <- c(names(readcounts)[1:6], new_names) # less potential for typos
```

```{r, eval=FALSE}
library(DESeq2)
```

```{r}
row.names(readcounts) <- make.names(readcounts$Geneid)

readcounts <- readcounts[ , -c(1:6)]
head(readcounts)
```
```{r}
#sample_info <- DataFrame(condition = sapply(strsplit(names(readcounts), "_"), function(x) x[1]), row.names = names(readcounts) )
sample_info <- DataFrame(condition = names(readcounts), row.names = names(readcounts) )
sample_info
```

```{r}
DESeq.ds <- DESeqDataSetFromMatrix(countData = readcounts, colData = sample_info,design = ~ condition)
DESeq.ds
```

```{r}
 colSums(counts(DESeq.ds)) %>% barplot
```

```{r}
dim(DESeq.ds)
```

```{r}
keep_genes <- rowSums(counts(DESeq.ds)) > 0
DESeq.ds <- DESeq.ds[ keep_genes, ] 
dim(DESeq.ds)
```

```{r}
DESeq.ds <- estimateSizeFactors(DESeq.ds) # calculate SFs, add them to object
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
```

```{r}
assay(DESeq.ds, "log.counts") <- log2(counts(DESeq.ds, normalized = FALSE) + 1)
## normalized read counts
log.norm.counts <- log2(counts(DESeq.ds, normalized=TRUE) + 1) 
assay(DESeq.ds, "log.norm.counts") <- log.norm.counts
```


```{r}
par(mfrow=c(1,2)) 
plot(log.norm.counts[,1:2], cex=.1,
     main = "size factor and log2-transformed")
## the rlog-transformed counts are stored in the accessor "assay"
plot(assay(DESeq.rlog)[,1], assay(DESeq.rlog)[,2],
cex=.1, main = "rlog transformed",
xlab = colnames(assay(DESeq.rlog[,1])), ylab = colnames(assay(DESeq.rlog[,2])) )
```

```{r}
rlog.norm.counts <- assay(DESeq.rlog)
save.image(file = "RNAseq.RData")
```


```{r}
#load("./RNAseq.RData")
corr_coeff <- cor(rlog.norm.counts, method = "pearson") 
```

```{r heatmap plot , fig.width=7, fig.height=7}
as.dist(1-corr_coeff, upper = TRUE) %>% 
  as.matrix %>% 
  pheatmap::pheatmap(., main = "Pearson correlation")
```

```{r dendrogram plot , fig.width=7, fig.height=7}

corr_coeff <- cor(rlog.norm.counts, method = "pearson") 
par(mfrow=c(1,2))

# Pearson corr. for rlog.norm values 

#Turn the similarity scores to distance values by subtracting the similarity score from 1
# hclust clusters the samples based on the distance matrix
as.dist(1 - corr_coeff) %>% 
  # hclust clusters the samples based on the distance matrix
  hclust %>% 
  # Plot the resulting dendrogram
  plot( ., labels = colnames(rlog.norm.counts), main = "rlog transformed read counts")

# Pearson corr. for log.norm.values
as.dist( 1 - cor(log.norm.counts, method = "pearson")) %>% 
  hclust %>% 
  plot( ., labels = colnames(log.norm.counts), main = "no rlog")
```


```{r PCA plot, fig.width=7, fig.height=7}
# rowVars calculates the variance of eacg gene across the samples
rv <- rowVars(assay(DESeq.rlog)) # equivalent to rowVars(rlog.norm.counts) 

# Obtain the indecies of the top 500 variable genes
top_variable <- order(rv, decreasing = TRUE)[seq_len(500)]
# Compute the PCAs based on the rlog normalized gene expression
pca <- prcomp(t(assay(DESeq.rlog)[top_variable, ]))

# Plot the two top PCs
p <- plotPCA(DESeq.rlog) 

```
